{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useNavigate}from'react-router-dom';import io from'socket.io-client';import'./UploadPage.css';import FileDropZone from'./components/FileDropZone';import ResumeProgressBar from'./components/ResumeProgressBar';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const UploadPage=()=>{// Initialize state from localStorage to persist data across navigation\nconst[jobDescriptionFiles,setJobDescriptionFiles]=useState(()=>{const saved=localStorage.getItem('uploadPage_jdFiles');return saved?JSON.parse(saved):[];});const[resumes,setResumes]=useState(()=>{const saved=localStorage.getItem('uploadPage_resumes');return saved?JSON.parse(saved):[];});const[message,setMessage]=useState('');const[isAnalyzing,setIsAnalyzing]=useState(false);const[analysisResult,setAnalysisResult]=useState(null);const[progressUpdates,setProgressUpdates]=useState([]);const[currentJobId,setCurrentJobId]=useState(null);const[existingJdInfo,setExistingJdInfo]=useState(()=>{const saved=localStorage.getItem('uploadPage_existingJdInfo');return saved?JSON.parse(saved):null;});const[isCheckingJd,setIsCheckingJd]=useState(false);const[hasUnsavedData,setHasUnsavedData]=useState(false);const[hasRestoredFiles,setHasRestoredFiles]=useState(false);const[duplicateInfo,setDuplicateInfo]=useState(null);const[isCheckingDuplicates,setIsCheckingDuplicates]=useState(false);const navigate=useNavigate();const socketRef=useRef(null);// Save data to localStorage whenever it changes\nuseEffect(()=>{if(jobDescriptionFiles.length>0||resumes.length>0){setHasUnsavedData(true);// Save file metadata (not the actual File objects)\nconst jdFilesMetadata=jobDescriptionFiles.map(file=>({name:file.name,size:file.size,type:file.type,lastModified:file.lastModified}));const resumesMetadata=resumes.map(file=>({name:file.name,size:file.size,type:file.type,lastModified:file.lastModified}));localStorage.setItem('uploadPage_jdFiles',JSON.stringify(jdFilesMetadata));localStorage.setItem('uploadPage_resumes',JSON.stringify(resumesMetadata));}else{setHasUnsavedData(false);localStorage.removeItem('uploadPage_jdFiles');localStorage.removeItem('uploadPage_resumes');}},[jobDescriptionFiles,resumes]);// Check for restored data on component mount\nuseEffect(()=>{// Force clear all stored data on page reload\nconst forceClearOnReload=()=>{// Method 1: Check performance navigation type\nif(performance.navigation&&performance.navigation.type===1){return true;}// Method 2: Check if page was loaded from cache (reload)\nif(performance.getEntriesByType&&performance.getEntriesByType('navigation').length>0){const navEntry=performance.getEntriesByType('navigation')[0];if(navEntry.type==='reload'){return true;}}// Method 3: Check if this is a fresh page load (no previous timestamp)\nconst lastVisit=sessionStorage.getItem('uploadPage_lastVisit');const currentTime=Date.now();if(!lastVisit){// First visit, set timestamp and treat as reload\nsessionStorage.setItem('uploadPage_lastVisit',currentTime.toString());return true;}// Check if more than 30 seconds have passed (treat as reload)\nconst timeDiff=currentTime-parseInt(lastVisit);if(timeDiff>30*1000){// 30 seconds\nsessionStorage.setItem('uploadPage_lastVisit',currentTime.toString());return true;}// Update timestamp for this visit\nsessionStorage.setItem('uploadPage_lastVisit',currentTime.toString());return false;};if(forceClearOnReload()){// This is a page reload, clear all stored data\nclearStoredData();return;}const savedJdFiles=localStorage.getItem('uploadPage_jdFiles');const savedResumes=localStorage.getItem('uploadPage_resumes');const savedExistingJdInfo=localStorage.getItem('uploadPage_existingJdInfo');if(savedJdFiles||savedResumes||savedExistingJdInfo){setHasUnsavedData(true);setHasRestoredFiles(true);if(savedJdFiles){// Store the metadata for display purposes\nsetJobDescriptionFiles(JSON.parse(savedJdFiles));}if(savedResumes){// Store the metadata for display purposes\nsetResumes(JSON.parse(savedResumes));}if(savedExistingJdInfo){setExistingJdInfo(JSON.parse(savedExistingJdInfo));}}},[]);// Save existing JD info to localStorage\nuseEffect(()=>{if(existingJdInfo){localStorage.setItem('uploadPage_existingJdInfo',JSON.stringify(existingJdInfo));}else{localStorage.removeItem('uploadPage_existingJdInfo');}},[existingJdInfo]);// Handle page unload warning when there's unsaved data\nuseEffect(()=>{const handleBeforeUnload=e=>{if(hasUnsavedData){e.preventDefault();e.returnValue='Files uploaded. Leave page?';return'Files uploaded. Leave page?';}};const handleUnload=()=>{// Clear stored data on page unload (including reload)\nclearStoredData();};window.addEventListener('beforeunload',handleBeforeUnload);window.addEventListener('unload',handleUnload);return()=>{window.removeEventListener('beforeunload',handleBeforeUnload);window.removeEventListener('unload',handleUnload);};},[hasUnsavedData]);// Initialize WebSocket connection\nuseEffect(()=>{socketRef.current=io();socketRef.current.on('connect',()=>{});socketRef.current.on('progress_update',data=>{setProgressUpdates(prev=>[...prev,data]);// Auto-navigate when analysis is complete\nif(data.type==='complete'&&currentJobId){// Clear any remaining stored data before redirecting\nclearStoredData();clearSession();setTimeout(()=>{navigate(\"/jobs/\".concat(currentJobId));},2000);}});socketRef.current.on('disconnect',()=>{});return()=>{if(socketRef.current){socketRef.current.disconnect();}};},[navigate,currentJobId]);const checkExistingJd=async file=>{setIsCheckingJd(true);setExistingJdInfo(null);try{const formData=new FormData();formData.append('jd_file',file);const response=await fetch('/api/jd/check',{method:'POST',body:formData});if(response.ok){const data=await response.json();if(data.exists){setExistingJdInfo(data);setMessage(\"Info: \".concat(data.message));}else{setMessage(\"Info: \".concat(data.message));// Clear the message after 3 seconds\nsetTimeout(()=>setMessage(''),3000);}}else{setMessage('Warning: Could not check for existing JD file. Proceeding with upload.');}}catch(error){setMessage('Warning: Could not check for existing JD file');}finally{setIsCheckingJd(false);}};const checkResumeDuplicates=async()=>{if(resumes.length===0){setMessage('Error: Please upload resumes first.');return;}// Check if we have an existing job to check duplicates within\nif(!existingJdInfo||!existingJdInfo.job){setMessage('Error: Please upload a job description file first to check for duplicates within a specific job.');return;}setIsCheckingDuplicates(true);setDuplicateInfo(null);try{const formData=new FormData();for(let i=0;i<resumes.length;i++){formData.append('resumes',resumes[i]);}// Add the job_id to check duplicates within this specific job\nformData.append('job_id',existingJdInfo.job.id);const response=await fetch('/api/resumes/check-duplicates',{method:'POST',body:formData});if(response.ok){const data=await response.json();setDuplicateInfo(data);if(data.duplicate_count>0){setMessage(\"Found \".concat(data.duplicate_count,\" duplicate resumes within job #\").concat(data.job_id,\". \").concat(data.unique_count,\" unique resumes will be processed.\"));}else{setMessage(\"All \".concat(data.total_files,\" resumes are unique within job #\").concat(data.job_id,\" and will be processed.\"));}// Clear the message after 5 seconds\nsetTimeout(()=>setMessage(''),5000);}else{setMessage('Warning: Could not check for duplicate resumes.');}}catch(error){setMessage('Warning: Could not check for duplicate resumes');}finally{setIsCheckingDuplicates(false);}};const handleJdFileChange=files=>{setJobDescriptionFiles(files);setExistingJdInfo(null);setMessage('');setHasRestoredFiles(false);// Reset restored files state when new files are uploaded\n// Check for existing JD if a file is uploaded\nif(files.length>0){checkExistingJd(files[0]);}else{// Clear any existing info if no files\nsetExistingJdInfo(null);setMessage('');}};const clearStoredData=()=>{localStorage.removeItem('uploadPage_jdFiles');localStorage.removeItem('uploadPage_resumes');localStorage.removeItem('uploadPage_existingJdInfo');setHasUnsavedData(false);setHasRestoredFiles(false);};const clearSession=()=>{sessionStorage.removeItem('uploadPage_session');};const handleSubmit=e=>{e.preventDefault();if(jobDescriptionFiles.length===0){setMessage('Error: Please upload at least one job description file.');return;}if(resumes.length===0){setMessage('Error: Please upload at least one résumé.');return;}setIsAnalyzing(true);setAnalysisResult(null);setMessage('');setProgressUpdates([]);// Clear stored data since analysis is starting\nclearStoredData();clearSession();setTimeout(async()=>{const formData=new FormData();// If we have an existing JD, we don't need to send the file again\nif(existingJdInfo){// Use the existing JD content\nformData.append('job_description',\"Job description from file: \".concat(existingJdInfo.jd_file.filename,\"\\n\\n\").concat(existingJdInfo.jd_file.content));// If there's an existing job, we can optionally use that job ID\nif(existingJdInfo.job){formData.append('existing_job_id',existingJdInfo.job.id);}}else{// Send job description files for new JD\nfor(let i=0;i<jobDescriptionFiles.length;i++){formData.append('job_description_files',jobDescriptionFiles[i]);}// Also send a text description for backward compatibility\nconst jdNames=jobDescriptionFiles.map(file=>file.name).join(', ');formData.append('job_description',\"Job description from files: \".concat(jdNames));}// Send resume files\nfor(let i=0;i<resumes.length;i++){formData.append('resumes',resumes[i]);}try{const response=await fetch('/api/analyze',{method:'POST',body:formData});if(!response.ok){throw new Error(\"Server error: \".concat(response.status));}const data=await response.json();setAnalysisResult(data);setCurrentJobId(data.job_id);if(response.ok){let messageText=\"Analysis queued successfully! \".concat(data.total_resumes,\" resumes are being processed in the background.\");// Add information about existing job if applicable\nif(data.is_existing_job){messageText+=\" Processing under existing job #\".concat(data.job_id,\".\");}// Add duplicate information if any\nif(data.duplicate_count>0){messageText+=\" \".concat(data.duplicate_count,\" duplicate resumes were skipped.\");}messageText+=\" You'll be redirected when complete.\";// Immediately redirect to the job overview page\nif(data.job_id){setTimeout(()=>{navigate(\"/jobs/\".concat(data.job_id));},500);// Small delay to show the success message\n}setMessage(messageText);// Data is now being processed, so we can clear the stored data\nclearStoredData();clearSession();}else{throw new Error(data.error||'An error occurred during analysis.');}}catch(error){setMessage(\"Error: \".concat(error.message));setIsAnalyzing(false);}},100);};const getProgressTypeClass=type=>{switch(type){case'success':return'progress-success';case'error':return'progress-error';case'warning':return'progress-warning';case'processing':return'progress-processing';default:return'progress-info';}};return/*#__PURE__*/_jsx(\"div\",{className:\"upload-page-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"glass-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"page-header\",children:/*#__PURE__*/_jsx(\"h2\",{children:\"Analyze New Role\"})}),/*#__PURE__*/_jsx(\"p\",{children:\"Provide a job description and the corresponding r\\xE9sum\\xE9s to begin the analysis.\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"upload-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"upload-section clickable-upload-section\",onClick:()=>document.getElementById(\"jobDescriptionFiles\").click(),children:[/*#__PURE__*/_jsx(\"h3\",{className:\"section-heading\",children:\"\\uD83D\\uDCC4 Upload Job Descriptions\"}),/*#__PURE__*/_jsx(\"p\",{className:\"section-description\",children:\"Upload one or more job description files to define the role requirements.\"}),\"                    \",/*#__PURE__*/_jsx(FileDropZone,{label:\"Upload Job Description Files\",files:jobDescriptionFiles,onFilesChange:handleJdFileChange,inputId:\"jobDescriptionFiles\",multiple:false,accept:\".pdf,.docx,.doc,.txt\",icon:\"\\uD83D\\uDCC4\",promptMain:\"Drag & drop job description files here, or click to select files\",promptTypes:\"Supports: .pdf, .docx, .doc, .txt\"})]}),\"                    \",isCheckingJd&&/*#__PURE__*/_jsxs(\"div\",{className:\"jd-checking\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"checking-spinner\",children:\"\\u23F3\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Checking for existing job description...\"})]}),existingJdInfo&&!isCheckingJd&&/*#__PURE__*/_jsxs(\"div\",{className:\"existing-jd-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"info-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"info-icon\",children:\"\\u2139\\uFE0F\"}),/*#__PURE__*/_jsx(\"span\",{className:\"info-title\",children:\"Existing Job Description Found\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"info-content\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"File:\"}),\" \",existingJdInfo.jd_file.filename]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Type:\"}),\" \",existingJdInfo.jd_file.file_type.toUpperCase()]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Uploaded:\"}),\" \",new Date(existingJdInfo.jd_file.created_at).toLocaleDateString()]}),existingJdInfo.job&&/*#__PURE__*/_jsxs(\"div\",{className:\"existing-job-info\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Existing Job ID:\"}),\" #\",existingJdInfo.job.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Resumes:\"}),\" \",existingJdInfo.job.resume_count,\" resumes already processed\"]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"view-existing-job-btn\",onClick:()=>{if(hasUnsavedData){if(window.confirm('You have unsaved upload data. Are you sure you want to leave? Your data will be saved and restored when you return.')){navigate(\"/jobs/\".concat(existingJdInfo.job.id));}}else{navigate(\"/jobs/\".concat(existingJdInfo.job.id));}},children:\"View Existing Job\"})]}),/*#__PURE__*/_jsxs(\"p\",{className:\"info-note\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Note:\"}),\" If you proceed, resumes will be processed under this existing job description.\"]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"clear-jd-btn\",onClick:()=>{if(window.confirm('Replace JD file? You can upload a different one.')){setJobDescriptionFiles([]);setExistingJdInfo(null);setMessage('');setHasRestoredFiles(false);}},children:\"Upload Different JD\"})]})]}),resumes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"processing-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"summary-header\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"summary-icon\",children:\"\\uD83D\\uDCCA\"}),/*#__PURE__*/_jsx(\"span\",{className:\"summary-title\",children:\"Processing Summary\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-content\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Resumes to Process:\"}),\" \",resumes.length]}),duplicateInfo&&/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Unique Resumes:\"}),\" \",duplicateInfo.unique_count]}),existingJdInfo&&existingJdInfo.job&&/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Target Job:\"}),\" #\",existingJdInfo.job.id,\" (\",existingJdInfo.job.resume_count,\" existing resumes)\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Mode:\"}),\" \",existingJdInfo?'Add to Existing Job':'Create New Job']}),existingJdInfo&&/*#__PURE__*/_jsxs(\"p\",{className:\"summary-note\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Note:\"}),\" Duplicate resumes (same content, different filename) will be automatically skipped.\"]}),duplicateInfo&&duplicateInfo.duplicate_count>0&&/*#__PURE__*/_jsxs(\"p\",{className:\"summary-note\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Note:\"}),\" \",duplicateInfo.duplicate_count,\" duplicate resumes will be skipped during processing.\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-section clickable-upload-section\",onClick:()=>document.getElementById(\"resumes\").click(),children:[/*#__PURE__*/_jsx(\"h3\",{className:\"section-heading\",children:\"\\u2601\\uFE0F Upload Resumes\"}),/*#__PURE__*/_jsx(\"p\",{className:\"section-description\",children:\"Upload one or more resume files to analyze against the job description.\"}),\"                    \",/*#__PURE__*/_jsx(FileDropZone,{label:\"Upload R\\xE9sum\\xE9s\",files:resumes,onFilesChange:files=>{setResumes(files);setHasRestoredFiles(false);// Reset restored files state when new files are uploaded\n},inputId:\"resumes\",multiple:true,accept:\".pdf,.docx,.txt\",icon:\"\\u2601\\uFE0F\",promptMain:\"Drag & drop files here, or click to select files\",promptTypes:\"Supports: .pdf, .docx, .txt\"})]}),\"                    \",resumes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"duplicate-check-section\",children:[!existingJdInfo||!existingJdInfo.job?/*#__PURE__*/_jsx(\"div\",{className:\"duplicate-check-info\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\uD83D\\uDCCB Upload a job description file first to check for duplicates within that specific job.\"})}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"duplicate-check-btn\",onClick:checkResumeDuplicates,disabled:isCheckingDuplicates,children:isCheckingDuplicates?'Checking...':'🔍 Check for Duplicates'}),/*#__PURE__*/_jsxs(\"p\",{className:\"duplicate-check-note\",children:[\"Checking duplicates within job #\",existingJdInfo.job.id,\" only\"]})]}),duplicateInfo&&/*#__PURE__*/_jsxs(\"div\",{className:\"duplicate-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"duplicate-summary\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Total Files:\"}),\" \",duplicateInfo.total_files]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Unique Resumes:\"}),\" \",duplicateInfo.unique_count]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Duplicates Found:\"}),\" \",duplicateInfo.duplicate_count]})]}),duplicateInfo.duplicates.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"duplicate-details\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Duplicate Details:\"}),duplicateInfo.duplicates.map((dup,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"duplicate-item\",children:dup.error?/*#__PURE__*/_jsxs(\"p\",{className:\"duplicate-error\",children:[\"\\u274C \",dup.filename,\": \",dup.error]}):/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"File:\"}),\" \",dup.filename]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Duplicate of:\"}),\" \",dup.duplicate_of.resume_filename,\" (Job #\",dup.duplicate_of.job_id,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Candidate:\"}),\" \",dup.duplicate_of.candidate_name]})]})},index))]})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"cta-button \".concat(isAnalyzing?'analyzing':''),disabled:isAnalyzing||hasRestoredFiles,children:/*#__PURE__*/_jsx(\"span\",{className:\"button-text\",children:isAnalyzing?'Analyzing...':hasRestoredFiles?'Re-upload Files to Continue':existingJdInfo?'Process Resumes with Existing JD':'Start Analysis'})})]}),/*#__PURE__*/_jsx(ResumeProgressBar,{isVisible:isAnalyzing,totalResumes:resumes.length,isAnalyzing:isAnalyzing}),isAnalyzing&&progressUpdates.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"progress-updates\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Analysis Progress\"}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-list\",children:progressUpdates.map((update,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"progress-item \".concat(getProgressTypeClass(update.type)),children:[/*#__PURE__*/_jsx(\"span\",{className:\"progress-message\",children:update.message}),/*#__PURE__*/_jsx(\"span\",{className:\"progress-time\",children:new Date(update.timestamp*1000).toLocaleTimeString()})]},index))})]}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message \".concat(message.startsWith('Error')?'error':'success'),children:message}),analysisResult&&analysisResult.skipped_files&&analysisResult.skipped_files.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"skipped-files-report\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Skipped Files Report\"}),/*#__PURE__*/_jsx(\"ul\",{children:analysisResult.skipped_files.map((file,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:file.filename}),\" - \",file.reason]},index))})]})]})});};export default UploadPage;// FORCE DEPLOYMENT UPDATE - Mon Sep  1 16:38:51 EDT 2025","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","io","FileDropZone","ResumeProgressBar","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","UploadPage","jobDescriptionFiles","setJobDescriptionFiles","saved","localStorage","getItem","JSON","parse","resumes","setResumes","message","setMessage","isAnalyzing","setIsAnalyzing","analysisResult","setAnalysisResult","progressUpdates","setProgressUpdates","currentJobId","setCurrentJobId","existingJdInfo","setExistingJdInfo","isCheckingJd","setIsCheckingJd","hasUnsavedData","setHasUnsavedData","hasRestoredFiles","setHasRestoredFiles","duplicateInfo","setDuplicateInfo","isCheckingDuplicates","setIsCheckingDuplicates","navigate","socketRef","length","jdFilesMetadata","map","file","name","size","type","lastModified","resumesMetadata","setItem","stringify","removeItem","forceClearOnReload","performance","navigation","getEntriesByType","navEntry","lastVisit","sessionStorage","currentTime","Date","now","toString","timeDiff","parseInt","clearStoredData","savedJdFiles","savedResumes","savedExistingJdInfo","handleBeforeUnload","e","preventDefault","returnValue","handleUnload","window","addEventListener","removeEventListener","current","on","data","prev","clearSession","setTimeout","concat","disconnect","checkExistingJd","formData","FormData","append","response","fetch","method","body","ok","json","exists","error","checkResumeDuplicates","job","i","id","duplicate_count","job_id","unique_count","total_files","handleJdFileChange","files","handleSubmit","jd_file","filename","content","jdNames","join","Error","status","messageText","total_resumes","is_existing_job","getProgressTypeClass","className","children","onSubmit","onClick","document","getElementById","click","label","onFilesChange","inputId","multiple","accept","icon","promptMain","promptTypes","file_type","toUpperCase","created_at","toLocaleDateString","resume_count","confirm","disabled","duplicates","dup","index","duplicate_of","resume_filename","candidate_name","isVisible","totalResumes","update","timestamp","toLocaleTimeString","startsWith","skipped_files","reason"],"sources":["/Users/aryansrivatsavadande/Downloads/talentvibe-v2-cleaned/frontend/src/UploadPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport io from 'socket.io-client';\nimport './UploadPage.css';\nimport FileDropZone from './components/FileDropZone';\nimport ResumeProgressBar from './components/ResumeProgressBar';\n\nconst UploadPage = () => {\n    // Initialize state from localStorage to persist data across navigation\n    const [jobDescriptionFiles, setJobDescriptionFiles] = useState(() => {\n        const saved = localStorage.getItem('uploadPage_jdFiles');\n        return saved ? JSON.parse(saved) : [];\n    });\n    \n    const [resumes, setResumes] = useState(() => {\n        const saved = localStorage.getItem('uploadPage_resumes');\n        return saved ? JSON.parse(saved) : [];\n    });\n    \n    const [message, setMessage] = useState('');\n    const [isAnalyzing, setIsAnalyzing] = useState(false);\n    const [analysisResult, setAnalysisResult] = useState(null);\n    const [progressUpdates, setProgressUpdates] = useState([]);\n    const [currentJobId, setCurrentJobId] = useState(null);\n    const [existingJdInfo, setExistingJdInfo] = useState(() => {\n        const saved = localStorage.getItem('uploadPage_existingJdInfo');\n        return saved ? JSON.parse(saved) : null;\n    });\n    const [isCheckingJd, setIsCheckingJd] = useState(false);\n    const [hasUnsavedData, setHasUnsavedData] = useState(false);\n    const [hasRestoredFiles, setHasRestoredFiles] = useState(false);\n    const [duplicateInfo, setDuplicateInfo] = useState(null);\n    const [isCheckingDuplicates, setIsCheckingDuplicates] = useState(false);\n    const navigate = useNavigate();\n    const socketRef = useRef(null);\n\n    // Save data to localStorage whenever it changes\n    useEffect(() => {\n        if (jobDescriptionFiles.length > 0 || resumes.length > 0) {\n            setHasUnsavedData(true);\n            \n            // Save file metadata (not the actual File objects)\n            const jdFilesMetadata = jobDescriptionFiles.map(file => ({\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                lastModified: file.lastModified\n            }));\n            \n            const resumesMetadata = resumes.map(file => ({\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                lastModified: file.lastModified\n            }));\n            \n            localStorage.setItem('uploadPage_jdFiles', JSON.stringify(jdFilesMetadata));\n            localStorage.setItem('uploadPage_resumes', JSON.stringify(resumesMetadata));\n        } else {\n            setHasUnsavedData(false);\n            localStorage.removeItem('uploadPage_jdFiles');\n            localStorage.removeItem('uploadPage_resumes');\n        }\n    }, [jobDescriptionFiles, resumes]);\n\n    // Check for restored data on component mount\n    useEffect(() => {\n        // Force clear all stored data on page reload\n        const forceClearOnReload = () => {\n            // Method 1: Check performance navigation type\n            if (performance.navigation && performance.navigation.type === 1) {\n                return true;\n            }\n            \n            // Method 2: Check if page was loaded from cache (reload)\n            if (performance.getEntriesByType && performance.getEntriesByType('navigation').length > 0) {\n                const navEntry = performance.getEntriesByType('navigation')[0];\n                if (navEntry.type === 'reload') {\n                    return true;\n                }\n            }\n            \n            // Method 3: Check if this is a fresh page load (no previous timestamp)\n            const lastVisit = sessionStorage.getItem('uploadPage_lastVisit');\n            const currentTime = Date.now();\n            \n            if (!lastVisit) {\n                // First visit, set timestamp and treat as reload\n                sessionStorage.setItem('uploadPage_lastVisit', currentTime.toString());\n                return true;\n            }\n            \n            // Check if more than 30 seconds have passed (treat as reload)\n            const timeDiff = currentTime - parseInt(lastVisit);\n            if (timeDiff > 30 * 1000) { // 30 seconds\n                sessionStorage.setItem('uploadPage_lastVisit', currentTime.toString());\n                return true;\n            }\n            \n            // Update timestamp for this visit\n            sessionStorage.setItem('uploadPage_lastVisit', currentTime.toString());\n            return false;\n        };\n        \n        if (forceClearOnReload()) {\n            // This is a page reload, clear all stored data\n            clearStoredData();\n            return;\n        }\n        \n        const savedJdFiles = localStorage.getItem('uploadPage_jdFiles');\n        const savedResumes = localStorage.getItem('uploadPage_resumes');\n        const savedExistingJdInfo = localStorage.getItem('uploadPage_existingJdInfo');\n        \n        if (savedJdFiles || savedResumes || savedExistingJdInfo) {\n            setHasUnsavedData(true);\n            setHasRestoredFiles(true);\n            if (savedJdFiles) {\n                // Store the metadata for display purposes\n                setJobDescriptionFiles(JSON.parse(savedJdFiles));\n            }\n            if (savedResumes) {\n                // Store the metadata for display purposes\n                setResumes(JSON.parse(savedResumes));\n            }\n            if (savedExistingJdInfo) {\n                setExistingJdInfo(JSON.parse(savedExistingJdInfo));\n            }\n        }\n    }, []);\n\n    // Save existing JD info to localStorage\n    useEffect(() => {\n        if (existingJdInfo) {\n            localStorage.setItem('uploadPage_existingJdInfo', JSON.stringify(existingJdInfo));\n        } else {\n            localStorage.removeItem('uploadPage_existingJdInfo');\n        }\n    }, [existingJdInfo]);\n\n    // Handle page unload warning when there's unsaved data\n    useEffect(() => {\n        const handleBeforeUnload = (e) => {\n            if (hasUnsavedData) {\n                e.preventDefault();\n                e.returnValue = 'Files uploaded. Leave page?';\n                return 'Files uploaded. Leave page?';\n            }\n        };\n\n        const handleUnload = () => {\n            // Clear stored data on page unload (including reload)\n            clearStoredData();\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        window.addEventListener('unload', handleUnload);\n        \n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n            window.removeEventListener('unload', handleUnload);\n        };\n    }, [hasUnsavedData]);\n\n    // Initialize WebSocket connection\n    useEffect(() => {\n        socketRef.current = io();\n        \n        socketRef.current.on('connect', () => {\n        });\n\n        socketRef.current.on('progress_update', (data) => {\n            setProgressUpdates(prev => [...prev, data]);\n            \n            // Auto-navigate when analysis is complete\n            if (data.type === 'complete' && currentJobId) {\n                // Clear any remaining stored data before redirecting\n                clearStoredData();\n                clearSession();\n                setTimeout(() => {\n                    navigate(`/jobs/${currentJobId}`);\n                }, 2000);\n            }\n        });\n\n        socketRef.current.on('disconnect', () => {\n        });\n\n        return () => {\n            if (socketRef.current) {\n                socketRef.current.disconnect();\n            }\n        };\n    }, [navigate, currentJobId]);\n\n    const checkExistingJd = async (file) => {\n        setIsCheckingJd(true);\n        setExistingJdInfo(null);\n        \n        try {\n            const formData = new FormData();\n            formData.append('jd_file', file);\n            \n            const response = await fetch('/api/jd/check', {\n                method: 'POST',\n                body: formData,\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                if (data.exists) {\n                    setExistingJdInfo(data);\n                    setMessage(`Info: ${data.message}`);\n                } else {\n                    setMessage(`Info: ${data.message}`);\n                    // Clear the message after 3 seconds\n                    setTimeout(() => setMessage(''), 3000);\n                }\n            } else {\n                \n                \n                setMessage('Warning: Could not check for existing JD file. Proceeding with upload.');\n            }\n        } catch (error) {\n            setMessage('Warning: Could not check for existing JD file');\n        } finally {\n            setIsCheckingJd(false);\n        }\n    };\n\n    const checkResumeDuplicates = async () => {\n        if (resumes.length === 0) {\n            setMessage('Error: Please upload resumes first.');\n            return;\n        }\n        \n        // Check if we have an existing job to check duplicates within\n        if (!existingJdInfo || !existingJdInfo.job) {\n            setMessage('Error: Please upload a job description file first to check for duplicates within a specific job.');\n            return;\n        }\n        \n        setIsCheckingDuplicates(true);\n        setDuplicateInfo(null);\n        \n        try {\n            const formData = new FormData();\n            for (let i = 0; i < resumes.length; i++) {\n                formData.append('resumes', resumes[i]);\n            }\n            // Add the job_id to check duplicates within this specific job\n            formData.append('job_id', existingJdInfo.job.id);\n            \n            const response = await fetch('/api/resumes/check-duplicates', {\n                method: 'POST',\n                body: formData,\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                setDuplicateInfo(data);\n                \n                if (data.duplicate_count > 0) {\n                    setMessage(`Found ${data.duplicate_count} duplicate resumes within job #${data.job_id}. ${data.unique_count} unique resumes will be processed.`);\n                } else {\n                    setMessage(`All ${data.total_files} resumes are unique within job #${data.job_id} and will be processed.`);\n                }\n                \n                // Clear the message after 5 seconds\n                setTimeout(() => setMessage(''), 5000);\n            } else {\n                \n                \n                setMessage('Warning: Could not check for duplicate resumes.');\n            }\n        } catch (error) {\n            setMessage('Warning: Could not check for duplicate resumes');\n        } finally {\n            setIsCheckingDuplicates(false);\n        }\n    };\n\n    const handleJdFileChange = (files) => {\n        setJobDescriptionFiles(files);\n        setExistingJdInfo(null);\n        setMessage('');\n        setHasRestoredFiles(false); // Reset restored files state when new files are uploaded\n        \n        // Check for existing JD if a file is uploaded\n        if (files.length > 0) {\n            checkExistingJd(files[0]);\n        } else {\n            // Clear any existing info if no files\n            setExistingJdInfo(null);\n            setMessage('');\n        }\n    };\n\n    const clearStoredData = () => {\n        localStorage.removeItem('uploadPage_jdFiles');\n        localStorage.removeItem('uploadPage_resumes');\n        localStorage.removeItem('uploadPage_existingJdInfo');\n        setHasUnsavedData(false);\n        setHasRestoredFiles(false);\n    };\n\n    const clearSession = () => {\n        sessionStorage.removeItem('uploadPage_session');\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (jobDescriptionFiles.length === 0) {\n            setMessage('Error: Please upload at least one job description file.');\n            return;\n        }\n        if (resumes.length === 0) {\n            setMessage('Error: Please upload at least one résumé.');\n            return;\n        }\n\n        setIsAnalyzing(true);\n        setAnalysisResult(null);\n        setMessage('');\n        setProgressUpdates([]);\n        \n        // Clear stored data since analysis is starting\n        clearStoredData();\n        clearSession();\n\n        setTimeout(async () => {\n            const formData = new FormData();\n            \n            // If we have an existing JD, we don't need to send the file again\n            if (existingJdInfo) {\n                // Use the existing JD content\n                formData.append('job_description', `Job description from file: ${existingJdInfo.jd_file.filename}\\n\\n${existingJdInfo.jd_file.content}`);\n                \n                // If there's an existing job, we can optionally use that job ID\n                if (existingJdInfo.job) {\n                    formData.append('existing_job_id', existingJdInfo.job.id);\n                }\n            } else {\n                // Send job description files for new JD\n                for (let i = 0; i < jobDescriptionFiles.length; i++) {\n                    formData.append('job_description_files', jobDescriptionFiles[i]);\n                }\n                \n                // Also send a text description for backward compatibility\n                const jdNames = jobDescriptionFiles.map(file => file.name).join(', ');\n                formData.append('job_description', `Job description from files: ${jdNames}`);\n            }\n            \n            // Send resume files\n            for (let i = 0; i < resumes.length; i++) {\n                formData.append('resumes', resumes[i]);\n            }\n\n            try {\n                const response = await fetch('/api/analyze', {\n                    method: 'POST',\n                    body: formData,\n                });\n\n                if (!response.ok) {\n                    \n                    throw new Error(`Server error: ${response.status}`);\n                }\n\n                const data = await response.json();\n                setAnalysisResult(data);\n                setCurrentJobId(data.job_id);\n\n                if (response.ok) {\n                    let messageText = `Analysis queued successfully! ${data.total_resumes} resumes are being processed in the background.`;\n                    \n                    // Add information about existing job if applicable\n                    if (data.is_existing_job) {\n                        messageText += ` Processing under existing job #${data.job_id}.`;\n                    }\n                    \n                    // Add duplicate information if any\n                    if (data.duplicate_count > 0) {\n                        messageText += ` ${data.duplicate_count} duplicate resumes were skipped.`;\n                    }\n                    \n                    messageText += \" You'll be redirected when complete.\";\n                    \n                    // Immediately redirect to the job overview page\n                    if (data.job_id) {\n                        setTimeout(() => {\n                            navigate(`/jobs/${data.job_id}`);\n                        }, 500); // Small delay to show the success message\n                    }\n                    \n                    setMessage(messageText);\n                    // Data is now being processed, so we can clear the stored data\n                    clearStoredData();\n                    clearSession();\n                } else {\n                    throw new Error(data.error || 'An error occurred during analysis.');\n                }\n            } catch (error) {\n                setMessage(`Error: ${error.message}`);\n                setIsAnalyzing(false);\n            }\n        }, 100);\n    };\n\n    const getProgressTypeClass = (type) => {\n        switch (type) {\n            case 'success': return 'progress-success';\n            case 'error': return 'progress-error';\n            case 'warning': return 'progress-warning';\n            case 'processing': return 'progress-processing';\n            default: return 'progress-info';\n        }\n    };\n\n    return (\n        <div className=\"upload-page-container\">\n\n            \n            <div className=\"glass-container\">\n                                <div className=\"page-header\">\n                    <h2>Analyze New Role</h2>\n                </div>\n                <p>Provide a job description and the corresponding résumés to begin the analysis.</p>\n                <form onSubmit={handleSubmit} className=\"upload-form\">\n                    {/* Job Description Upload Section */}\n                    <div className=\"upload-section clickable-upload-section\" onClick={() => document.getElementById(\"jobDescriptionFiles\").click()}>\n                        <h3 className=\"section-heading\">📄 Upload Job Descriptions</h3>\n                        <p className=\"section-description\">Upload one or more job description files to define the role requirements.</p>                    <FileDropZone\n                        label=\"Upload Job Description Files\"\n                        files={jobDescriptionFiles}\n                        onFilesChange={handleJdFileChange}\n                        inputId=\"jobDescriptionFiles\"\n                        multiple={false}\n                        accept=\".pdf,.docx,.doc,.txt\"\n                        icon=\"📄\"\n                        promptMain=\"Drag & drop job description files here, or click to select files\"\n                        promptTypes=\"Supports: .pdf, .docx, .doc, .txt\"\n                    />\n                    \n                    {/* Show loading state when checking JD */}\n                    </div>                    {isCheckingJd && (\n                        <div className=\"jd-checking\">\n                            <div className=\"checking-spinner\">⏳</div>\n                            <p>Checking for existing job description...</p>\n                        </div>\n                    )}\n                    \n                    {/* Show existing JD information if found */}\n                    {existingJdInfo && !isCheckingJd && (\n                        <div className=\"existing-jd-info\">\n                            <div className=\"info-header\">\n                                <span className=\"info-icon\">ℹ️</span>\n                                <span className=\"info-title\">Existing Job Description Found</span>\n                            </div>\n                            <div className=\"info-content\">\n                                <p><strong>File:</strong> {existingJdInfo.jd_file.filename}</p>\n                                <p><strong>Type:</strong> {existingJdInfo.jd_file.file_type.toUpperCase()}</p>\n                                <p><strong>Uploaded:</strong> {new Date(existingJdInfo.jd_file.created_at).toLocaleDateString()}</p>\n                                \n                                {existingJdInfo.job && (\n                                    <div className=\"existing-job-info\">\n                                        <p><strong>Existing Job ID:</strong> #{existingJdInfo.job.id}</p>\n                                        <p><strong>Resumes:</strong> {existingJdInfo.job.resume_count} resumes already processed</p>\n                                        <button \n                                            type=\"button\" \n                                            className=\"view-existing-job-btn\"\n                                            onClick={() => {\n                                                if (hasUnsavedData) {\n                                                    if (window.confirm('You have unsaved upload data. Are you sure you want to leave? Your data will be saved and restored when you return.')) {\n                                                        navigate(`/jobs/${existingJdInfo.job.id}`);\n                                                    }\n                                                } else {\n                                                    navigate(`/jobs/${existingJdInfo.job.id}`);\n                                                }\n                                            }}\n                                        >\n                                            View Existing Job\n                                        </button>\n                                    </div>\n                                )}\n                                \n                                <p className=\"info-note\">\n                                    <strong>Note:</strong> If you proceed, resumes will be processed under this existing job description.\n                                </p>\n                                \n                                <button \n                                    type=\"button\" \n                                    className=\"clear-jd-btn\"\n                                    onClick={() => {\n                                        if (window.confirm('Replace JD file? You can upload a different one.')) {\n                                            setJobDescriptionFiles([]);\n                                            setExistingJdInfo(null);\n                                            setMessage('');\n                                            setHasRestoredFiles(false);\n                                        }\n                                    }}\n                                >\n                                    Upload Different JD\n                                </button>\n                            </div>\n                        </div>\n                    )}\n                    \n                    {/* Processing Summary */}\n                    {resumes.length > 0 && (\n                        <div className=\"processing-summary\">\n                            <div className=\"summary-header\">\n                                <span className=\"summary-icon\">📊</span>\n                                <span className=\"summary-title\">Processing Summary</span>\n                            </div>\n                            <div className=\"summary-content\">\n                                <p><strong>Resumes to Process:</strong> {resumes.length}</p>\n                                {duplicateInfo && (\n                                    <p><strong>Unique Resumes:</strong> {duplicateInfo.unique_count}</p>\n                                )}\n                                {existingJdInfo && existingJdInfo.job && (\n                                    <p><strong>Target Job:</strong> #{existingJdInfo.job.id} ({existingJdInfo.job.resume_count} existing resumes)</p>\n                                )}\n                                <p><strong>Mode:</strong> {existingJdInfo ? 'Add to Existing Job' : 'Create New Job'}</p>\n                                {existingJdInfo && (\n                                    <p className=\"summary-note\">\n                                        <strong>Note:</strong> Duplicate resumes (same content, different filename) will be automatically skipped.\n                                    </p>\n                                )}\n                                {duplicateInfo && duplicateInfo.duplicate_count > 0 && (\n                                    <p className=\"summary-note\">\n                                        <strong>Note:</strong> {duplicateInfo.duplicate_count} duplicate resumes will be skipped during processing.\n                                    </p>\n                                )}\n                            </div>\n                        </div>\n                    )}\n                    \n                    {/* Resume Upload Section */}\n                    <div className=\"upload-section clickable-upload-section\" onClick={() => document.getElementById(\"resumes\").click()}>\n                        <h3 className=\"section-heading\">☁️ Upload Resumes</h3>\n                        <p className=\"section-description\">Upload one or more resume files to analyze against the job description.</p>                    <FileDropZone\n                        label=\"Upload Résumés\"\n                        files={resumes}\n                        onFilesChange={(files) => {\n                            setResumes(files);\n                            setHasRestoredFiles(false); // Reset restored files state when new files are uploaded\n                        }}\n                        inputId=\"resumes\"\n                        multiple={true}\n                        accept=\".pdf,.docx,.txt\"\n                        icon=\"☁️\"\n                        promptMain=\"Drag & drop files here, or click to select files\"\n                        promptTypes=\"Supports: .pdf, .docx, .txt\"\n                    />\n                    \n                    {/* Duplicate Check Button */}\n                    </div>                    {resumes.length > 0 && (\n                        <div className=\"duplicate-check-section\">\n                            {!existingJdInfo || !existingJdInfo.job ? (\n                                <div className=\"duplicate-check-info\">\n                                    <p>📋 Upload a job description file first to check for duplicates within that specific job.</p>\n                                </div>\n                            ) : (\n                                <>\n                                    <button \n                                        type=\"button\" \n                                        className=\"duplicate-check-btn\"\n                                        onClick={checkResumeDuplicates}\n                                        disabled={isCheckingDuplicates}\n                                    >\n                                        {isCheckingDuplicates ? 'Checking...' : '🔍 Check for Duplicates'}\n                                    </button>\n                                    <p className=\"duplicate-check-note\">\n                                        Checking duplicates within job #{existingJdInfo.job.id} only\n                                    </p>\n                                </>\n                            )}\n                            \n                            {duplicateInfo && (\n                                <div className=\"duplicate-info\">\n                                    <div className=\"duplicate-summary\">\n                                        <p><strong>Total Files:</strong> {duplicateInfo.total_files}</p>\n                                        <p><strong>Unique Resumes:</strong> {duplicateInfo.unique_count}</p>\n                                        <p><strong>Duplicates Found:</strong> {duplicateInfo.duplicate_count}</p>\n                                    </div>\n                                    \n                                    {duplicateInfo.duplicates.length > 0 && (\n                                        <div className=\"duplicate-details\">\n                                            <h4>Duplicate Details:</h4>\n                                            {duplicateInfo.duplicates.map((dup, index) => (\n                                                <div key={index} className=\"duplicate-item\">\n                                                    {dup.error ? (\n                                                        <p className=\"duplicate-error\">❌ {dup.filename}: {dup.error}</p>\n                                                    ) : (\n                                                        <div>\n                                                            <p><strong>File:</strong> {dup.filename}</p>\n                                                            <p><strong>Duplicate of:</strong> {dup.duplicate_of.resume_filename} (Job #{dup.duplicate_of.job_id})</p>\n                                                            <p><strong>Candidate:</strong> {dup.duplicate_of.candidate_name}</p>\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            ))}\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                    )}\n                    \n                    <button \n                        type=\"submit\" \n                        className={`cta-button ${isAnalyzing ? 'analyzing' : ''}`} \n                        disabled={isAnalyzing || hasRestoredFiles}\n                    >\n                        <span className=\"button-text\">\n                            {isAnalyzing ? 'Analyzing...' : \n                             hasRestoredFiles ? 'Re-upload Files to Continue' :\n                             existingJdInfo ? 'Process Resumes with Existing JD' : 'Start Analysis'}\n                        </span>\n                    </button>\n                </form>\n                \n                {/* Resume Processing Progress Bar - NEW COMPONENT */}\n                <ResumeProgressBar\n                    isVisible={isAnalyzing}\n                    totalResumes={resumes.length}\n                    isAnalyzing={isAnalyzing}\n                />\n                \n                {/* Real-time Progress Updates */}\n                {isAnalyzing && progressUpdates.length > 0 && (\n                    <div className=\"progress-updates\">\n                        <h4>Analysis Progress</h4>\n                        <div className=\"progress-list\">\n                            {progressUpdates.map((update, index) => (\n                                <div key={index} className={`progress-item ${getProgressTypeClass(update.type)}`}>\n                                    <span className=\"progress-message\">{update.message}</span>\n                                    <span className=\"progress-time\">\n                                        {new Date(update.timestamp * 1000).toLocaleTimeString()}\n                                    </span>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n                \n                {message && <p className={`message ${message.startsWith('Error') ? 'error' : 'success'}`}>{message}</p>}\n                \n                {analysisResult && analysisResult.skipped_files && analysisResult.skipped_files.length > 0 && (\n                    <div className=\"skipped-files-report\">\n                        <h4>Skipped Files Report</h4>\n                        <ul>\n                            {analysisResult.skipped_files.map((file, index) => (\n                                <li key={index}><strong>{file.filename}</strong> - {file.reason}</li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default UploadPage;// FORCE DEPLOYMENT UPDATE - Mon Sep  1 16:38:51 EDT 2025\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,EAAE,KAAM,kBAAkB,CACjC,MAAO,kBAAkB,CACzB,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,MAAO,CAAAC,iBAAiB,KAAM,gCAAgC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE/D,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACrB;AACA,KAAM,CAACC,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGf,QAAQ,CAAC,IAAM,CACjE,KAAM,CAAAgB,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CACxD,MAAO,CAAAF,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAG,EAAE,CACzC,CAAC,CAAC,CAEF,KAAM,CAACK,OAAO,CAAEC,UAAU,CAAC,CAAGtB,QAAQ,CAAC,IAAM,CACzC,KAAM,CAAAgB,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CACxD,MAAO,CAAAF,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAG,EAAE,CACzC,CAAC,CAAC,CAEF,KAAM,CAACO,OAAO,CAAEC,UAAU,CAAC,CAAGxB,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACyB,WAAW,CAAEC,cAAc,CAAC,CAAG1B,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAC2B,cAAc,CAAEC,iBAAiB,CAAC,CAAG5B,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAAC6B,eAAe,CAAEC,kBAAkB,CAAC,CAAG9B,QAAQ,CAAC,EAAE,CAAC,CAC1D,KAAM,CAAC+B,YAAY,CAAEC,eAAe,CAAC,CAAGhC,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACiC,cAAc,CAAEC,iBAAiB,CAAC,CAAGlC,QAAQ,CAAC,IAAM,CACvD,KAAM,CAAAgB,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,2BAA2B,CAAC,CAC/D,MAAO,CAAAF,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAG,IAAI,CAC3C,CAAC,CAAC,CACF,KAAM,CAACmB,YAAY,CAAEC,eAAe,CAAC,CAAGpC,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAACqC,cAAc,CAAEC,iBAAiB,CAAC,CAAGtC,QAAQ,CAAC,KAAK,CAAC,CAC3D,KAAM,CAACuC,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGxC,QAAQ,CAAC,KAAK,CAAC,CAC/D,KAAM,CAACyC,aAAa,CAAEC,gBAAgB,CAAC,CAAG1C,QAAQ,CAAC,IAAI,CAAC,CACxD,KAAM,CAAC2C,oBAAoB,CAAEC,uBAAuB,CAAC,CAAG5C,QAAQ,CAAC,KAAK,CAAC,CACvE,KAAM,CAAA6C,QAAQ,CAAG1C,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAA2C,SAAS,CAAG5C,MAAM,CAAC,IAAI,CAAC,CAE9B;AACAD,SAAS,CAAC,IAAM,CACZ,GAAIa,mBAAmB,CAACiC,MAAM,CAAG,CAAC,EAAI1B,OAAO,CAAC0B,MAAM,CAAG,CAAC,CAAE,CACtDT,iBAAiB,CAAC,IAAI,CAAC,CAEvB;AACA,KAAM,CAAAU,eAAe,CAAGlC,mBAAmB,CAACmC,GAAG,CAACC,IAAI,GAAK,CACrDC,IAAI,CAAED,IAAI,CAACC,IAAI,CACfC,IAAI,CAAEF,IAAI,CAACE,IAAI,CACfC,IAAI,CAAEH,IAAI,CAACG,IAAI,CACfC,YAAY,CAAEJ,IAAI,CAACI,YACvB,CAAC,CAAC,CAAC,CAEH,KAAM,CAAAC,eAAe,CAAGlC,OAAO,CAAC4B,GAAG,CAACC,IAAI,GAAK,CACzCC,IAAI,CAAED,IAAI,CAACC,IAAI,CACfC,IAAI,CAAEF,IAAI,CAACE,IAAI,CACfC,IAAI,CAAEH,IAAI,CAACG,IAAI,CACfC,YAAY,CAAEJ,IAAI,CAACI,YACvB,CAAC,CAAC,CAAC,CAEHrC,YAAY,CAACuC,OAAO,CAAC,oBAAoB,CAAErC,IAAI,CAACsC,SAAS,CAACT,eAAe,CAAC,CAAC,CAC3E/B,YAAY,CAACuC,OAAO,CAAC,oBAAoB,CAAErC,IAAI,CAACsC,SAAS,CAACF,eAAe,CAAC,CAAC,CAC/E,CAAC,IAAM,CACHjB,iBAAiB,CAAC,KAAK,CAAC,CACxBrB,YAAY,CAACyC,UAAU,CAAC,oBAAoB,CAAC,CAC7CzC,YAAY,CAACyC,UAAU,CAAC,oBAAoB,CAAC,CACjD,CACJ,CAAC,CAAE,CAAC5C,mBAAmB,CAAEO,OAAO,CAAC,CAAC,CAElC;AACApB,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAA0D,kBAAkB,CAAGA,CAAA,GAAM,CAC7B;AACA,GAAIC,WAAW,CAACC,UAAU,EAAID,WAAW,CAACC,UAAU,CAACR,IAAI,GAAK,CAAC,CAAE,CAC7D,MAAO,KAAI,CACf,CAEA;AACA,GAAIO,WAAW,CAACE,gBAAgB,EAAIF,WAAW,CAACE,gBAAgB,CAAC,YAAY,CAAC,CAACf,MAAM,CAAG,CAAC,CAAE,CACvF,KAAM,CAAAgB,QAAQ,CAAGH,WAAW,CAACE,gBAAgB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAC9D,GAAIC,QAAQ,CAACV,IAAI,GAAK,QAAQ,CAAE,CAC5B,MAAO,KAAI,CACf,CACJ,CAEA;AACA,KAAM,CAAAW,SAAS,CAAGC,cAAc,CAAC/C,OAAO,CAAC,sBAAsB,CAAC,CAChE,KAAM,CAAAgD,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAE9B,GAAI,CAACJ,SAAS,CAAE,CACZ;AACAC,cAAc,CAACT,OAAO,CAAC,sBAAsB,CAAEU,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,CACtE,MAAO,KAAI,CACf,CAEA;AACA,KAAM,CAAAC,QAAQ,CAAGJ,WAAW,CAAGK,QAAQ,CAACP,SAAS,CAAC,CAClD,GAAIM,QAAQ,CAAG,EAAE,CAAG,IAAI,CAAE,CAAE;AACxBL,cAAc,CAACT,OAAO,CAAC,sBAAsB,CAAEU,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,CACtE,MAAO,KAAI,CACf,CAEA;AACAJ,cAAc,CAACT,OAAO,CAAC,sBAAsB,CAAEU,WAAW,CAACG,QAAQ,CAAC,CAAC,CAAC,CACtE,MAAO,MAAK,CAChB,CAAC,CAED,GAAIV,kBAAkB,CAAC,CAAC,CAAE,CACtB;AACAa,eAAe,CAAC,CAAC,CACjB,OACJ,CAEA,KAAM,CAAAC,YAAY,CAAGxD,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAC/D,KAAM,CAAAwD,YAAY,CAAGzD,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAC/D,KAAM,CAAAyD,mBAAmB,CAAG1D,YAAY,CAACC,OAAO,CAAC,2BAA2B,CAAC,CAE7E,GAAIuD,YAAY,EAAIC,YAAY,EAAIC,mBAAmB,CAAE,CACrDrC,iBAAiB,CAAC,IAAI,CAAC,CACvBE,mBAAmB,CAAC,IAAI,CAAC,CACzB,GAAIiC,YAAY,CAAE,CACd;AACA1D,sBAAsB,CAACI,IAAI,CAACC,KAAK,CAACqD,YAAY,CAAC,CAAC,CACpD,CACA,GAAIC,YAAY,CAAE,CACd;AACApD,UAAU,CAACH,IAAI,CAACC,KAAK,CAACsD,YAAY,CAAC,CAAC,CACxC,CACA,GAAIC,mBAAmB,CAAE,CACrBzC,iBAAiB,CAACf,IAAI,CAACC,KAAK,CAACuD,mBAAmB,CAAC,CAAC,CACtD,CACJ,CACJ,CAAC,CAAE,EAAE,CAAC,CAEN;AACA1E,SAAS,CAAC,IAAM,CACZ,GAAIgC,cAAc,CAAE,CAChBhB,YAAY,CAACuC,OAAO,CAAC,2BAA2B,CAAErC,IAAI,CAACsC,SAAS,CAACxB,cAAc,CAAC,CAAC,CACrF,CAAC,IAAM,CACHhB,YAAY,CAACyC,UAAU,CAAC,2BAA2B,CAAC,CACxD,CACJ,CAAC,CAAE,CAACzB,cAAc,CAAC,CAAC,CAEpB;AACAhC,SAAS,CAAC,IAAM,CACZ,KAAM,CAAA2E,kBAAkB,CAAIC,CAAC,EAAK,CAC9B,GAAIxC,cAAc,CAAE,CAChBwC,CAAC,CAACC,cAAc,CAAC,CAAC,CAClBD,CAAC,CAACE,WAAW,CAAG,6BAA6B,CAC7C,MAAO,6BAA6B,CACxC,CACJ,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACvB;AACAR,eAAe,CAAC,CAAC,CACrB,CAAC,CAEDS,MAAM,CAACC,gBAAgB,CAAC,cAAc,CAAEN,kBAAkB,CAAC,CAC3DK,MAAM,CAACC,gBAAgB,CAAC,QAAQ,CAAEF,YAAY,CAAC,CAE/C,MAAO,IAAM,CACTC,MAAM,CAACE,mBAAmB,CAAC,cAAc,CAAEP,kBAAkB,CAAC,CAC9DK,MAAM,CAACE,mBAAmB,CAAC,QAAQ,CAAEH,YAAY,CAAC,CACtD,CAAC,CACL,CAAC,CAAE,CAAC3C,cAAc,CAAC,CAAC,CAEpB;AACApC,SAAS,CAAC,IAAM,CACZ6C,SAAS,CAACsC,OAAO,CAAGhF,EAAE,CAAC,CAAC,CAExB0C,SAAS,CAACsC,OAAO,CAACC,EAAE,CAAC,SAAS,CAAE,IAAM,CACtC,CAAC,CAAC,CAEFvC,SAAS,CAACsC,OAAO,CAACC,EAAE,CAAC,iBAAiB,CAAGC,IAAI,EAAK,CAC9CxD,kBAAkB,CAACyD,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAED,IAAI,CAAC,CAAC,CAE3C;AACA,GAAIA,IAAI,CAACjC,IAAI,GAAK,UAAU,EAAItB,YAAY,CAAE,CAC1C;AACAyC,eAAe,CAAC,CAAC,CACjBgB,YAAY,CAAC,CAAC,CACdC,UAAU,CAAC,IAAM,CACb5C,QAAQ,UAAA6C,MAAA,CAAU3D,YAAY,CAAE,CAAC,CACrC,CAAC,CAAE,IAAI,CAAC,CACZ,CACJ,CAAC,CAAC,CAEFe,SAAS,CAACsC,OAAO,CAACC,EAAE,CAAC,YAAY,CAAE,IAAM,CACzC,CAAC,CAAC,CAEF,MAAO,IAAM,CACT,GAAIvC,SAAS,CAACsC,OAAO,CAAE,CACnBtC,SAAS,CAACsC,OAAO,CAACO,UAAU,CAAC,CAAC,CAClC,CACJ,CAAC,CACL,CAAC,CAAE,CAAC9C,QAAQ,CAAEd,YAAY,CAAC,CAAC,CAE5B,KAAM,CAAA6D,eAAe,CAAG,KAAO,CAAA1C,IAAI,EAAK,CACpCd,eAAe,CAAC,IAAI,CAAC,CACrBF,iBAAiB,CAAC,IAAI,CAAC,CAEvB,GAAI,CACA,KAAM,CAAA2D,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,SAAS,CAAE7C,IAAI,CAAC,CAEhC,KAAM,CAAA8C,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,eAAe,CAAE,CAC1CC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACV,CAAC,CAAC,CAEF,GAAIG,QAAQ,CAACI,EAAE,CAAE,CACb,KAAM,CAAAd,IAAI,CAAG,KAAM,CAAAU,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAIf,IAAI,CAACgB,MAAM,CAAE,CACbpE,iBAAiB,CAACoD,IAAI,CAAC,CACvB9D,UAAU,UAAAkE,MAAA,CAAUJ,IAAI,CAAC/D,OAAO,CAAE,CAAC,CACvC,CAAC,IAAM,CACHC,UAAU,UAAAkE,MAAA,CAAUJ,IAAI,CAAC/D,OAAO,CAAE,CAAC,CACnC;AACAkE,UAAU,CAAC,IAAMjE,UAAU,CAAC,EAAE,CAAC,CAAE,IAAI,CAAC,CAC1C,CACJ,CAAC,IAAM,CAGHA,UAAU,CAAC,wEAAwE,CAAC,CACxF,CACJ,CAAE,MAAO+E,KAAK,CAAE,CACZ/E,UAAU,CAAC,+CAA+C,CAAC,CAC/D,CAAC,OAAS,CACNY,eAAe,CAAC,KAAK,CAAC,CAC1B,CACJ,CAAC,CAED,KAAM,CAAAoE,qBAAqB,CAAG,KAAAA,CAAA,GAAY,CACtC,GAAInF,OAAO,CAAC0B,MAAM,GAAK,CAAC,CAAE,CACtBvB,UAAU,CAAC,qCAAqC,CAAC,CACjD,OACJ,CAEA;AACA,GAAI,CAACS,cAAc,EAAI,CAACA,cAAc,CAACwE,GAAG,CAAE,CACxCjF,UAAU,CAAC,kGAAkG,CAAC,CAC9G,OACJ,CAEAoB,uBAAuB,CAAC,IAAI,CAAC,CAC7BF,gBAAgB,CAAC,IAAI,CAAC,CAEtB,GAAI,CACA,KAAM,CAAAmD,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/B,IAAK,GAAI,CAAAY,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGrF,OAAO,CAAC0B,MAAM,CAAE2D,CAAC,EAAE,CAAE,CACrCb,QAAQ,CAACE,MAAM,CAAC,SAAS,CAAE1E,OAAO,CAACqF,CAAC,CAAC,CAAC,CAC1C,CACA;AACAb,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAE9D,cAAc,CAACwE,GAAG,CAACE,EAAE,CAAC,CAEhD,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,+BAA+B,CAAE,CAC1DC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACV,CAAC,CAAC,CAEF,GAAIG,QAAQ,CAACI,EAAE,CAAE,CACb,KAAM,CAAAd,IAAI,CAAG,KAAM,CAAAU,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC3D,gBAAgB,CAAC4C,IAAI,CAAC,CAEtB,GAAIA,IAAI,CAACsB,eAAe,CAAG,CAAC,CAAE,CAC1BpF,UAAU,UAAAkE,MAAA,CAAUJ,IAAI,CAACsB,eAAe,oCAAAlB,MAAA,CAAkCJ,IAAI,CAACuB,MAAM,OAAAnB,MAAA,CAAKJ,IAAI,CAACwB,YAAY,sCAAoC,CAAC,CACpJ,CAAC,IAAM,CACHtF,UAAU,QAAAkE,MAAA,CAAQJ,IAAI,CAACyB,WAAW,qCAAArB,MAAA,CAAmCJ,IAAI,CAACuB,MAAM,2BAAyB,CAAC,CAC9G,CAEA;AACApB,UAAU,CAAC,IAAMjE,UAAU,CAAC,EAAE,CAAC,CAAE,IAAI,CAAC,CAC1C,CAAC,IAAM,CAGHA,UAAU,CAAC,iDAAiD,CAAC,CACjE,CACJ,CAAE,MAAO+E,KAAK,CAAE,CACZ/E,UAAU,CAAC,gDAAgD,CAAC,CAChE,CAAC,OAAS,CACNoB,uBAAuB,CAAC,KAAK,CAAC,CAClC,CACJ,CAAC,CAED,KAAM,CAAAoE,kBAAkB,CAAIC,KAAK,EAAK,CAClClG,sBAAsB,CAACkG,KAAK,CAAC,CAC7B/E,iBAAiB,CAAC,IAAI,CAAC,CACvBV,UAAU,CAAC,EAAE,CAAC,CACdgB,mBAAmB,CAAC,KAAK,CAAC,CAAE;AAE5B;AACA,GAAIyE,KAAK,CAAClE,MAAM,CAAG,CAAC,CAAE,CAClB6C,eAAe,CAACqB,KAAK,CAAC,CAAC,CAAC,CAAC,CAC7B,CAAC,IAAM,CACH;AACA/E,iBAAiB,CAAC,IAAI,CAAC,CACvBV,UAAU,CAAC,EAAE,CAAC,CAClB,CACJ,CAAC,CAED,KAAM,CAAAgD,eAAe,CAAGA,CAAA,GAAM,CAC1BvD,YAAY,CAACyC,UAAU,CAAC,oBAAoB,CAAC,CAC7CzC,YAAY,CAACyC,UAAU,CAAC,oBAAoB,CAAC,CAC7CzC,YAAY,CAACyC,UAAU,CAAC,2BAA2B,CAAC,CACpDpB,iBAAiB,CAAC,KAAK,CAAC,CACxBE,mBAAmB,CAAC,KAAK,CAAC,CAC9B,CAAC,CAED,KAAM,CAAAgD,YAAY,CAAGA,CAAA,GAAM,CACvBvB,cAAc,CAACP,UAAU,CAAC,oBAAoB,CAAC,CACnD,CAAC,CAED,KAAM,CAAAwD,YAAY,CAAIrC,CAAC,EAAK,CACxBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB,GAAIhE,mBAAmB,CAACiC,MAAM,GAAK,CAAC,CAAE,CAClCvB,UAAU,CAAC,yDAAyD,CAAC,CACrE,OACJ,CACA,GAAIH,OAAO,CAAC0B,MAAM,GAAK,CAAC,CAAE,CACtBvB,UAAU,CAAC,2CAA2C,CAAC,CACvD,OACJ,CAEAE,cAAc,CAAC,IAAI,CAAC,CACpBE,iBAAiB,CAAC,IAAI,CAAC,CACvBJ,UAAU,CAAC,EAAE,CAAC,CACdM,kBAAkB,CAAC,EAAE,CAAC,CAEtB;AACA0C,eAAe,CAAC,CAAC,CACjBgB,YAAY,CAAC,CAAC,CAEdC,UAAU,CAAC,SAAY,CACnB,KAAM,CAAAI,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAE/B;AACA,GAAI7D,cAAc,CAAE,CAChB;AACA4D,QAAQ,CAACE,MAAM,CAAC,iBAAiB,+BAAAL,MAAA,CAAgCzD,cAAc,CAACkF,OAAO,CAACC,QAAQ,SAAA1B,MAAA,CAAOzD,cAAc,CAACkF,OAAO,CAACE,OAAO,CAAE,CAAC,CAExI;AACA,GAAIpF,cAAc,CAACwE,GAAG,CAAE,CACpBZ,QAAQ,CAACE,MAAM,CAAC,iBAAiB,CAAE9D,cAAc,CAACwE,GAAG,CAACE,EAAE,CAAC,CAC7D,CACJ,CAAC,IAAM,CACH;AACA,IAAK,GAAI,CAAAD,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG5F,mBAAmB,CAACiC,MAAM,CAAE2D,CAAC,EAAE,CAAE,CACjDb,QAAQ,CAACE,MAAM,CAAC,uBAAuB,CAAEjF,mBAAmB,CAAC4F,CAAC,CAAC,CAAC,CACpE,CAEA;AACA,KAAM,CAAAY,OAAO,CAAGxG,mBAAmB,CAACmC,GAAG,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAACoE,IAAI,CAAC,IAAI,CAAC,CACrE1B,QAAQ,CAACE,MAAM,CAAC,iBAAiB,gCAAAL,MAAA,CAAiC4B,OAAO,CAAE,CAAC,CAChF,CAEA;AACA,IAAK,GAAI,CAAAZ,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGrF,OAAO,CAAC0B,MAAM,CAAE2D,CAAC,EAAE,CAAE,CACrCb,QAAQ,CAACE,MAAM,CAAC,SAAS,CAAE1E,OAAO,CAACqF,CAAC,CAAC,CAAC,CAC1C,CAEA,GAAI,CACA,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,cAAc,CAAE,CACzCC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEN,QACV,CAAC,CAAC,CAEF,GAAI,CAACG,QAAQ,CAACI,EAAE,CAAE,CAEd,KAAM,IAAI,CAAAoB,KAAK,kBAAA9B,MAAA,CAAkBM,QAAQ,CAACyB,MAAM,CAAE,CAAC,CACvD,CAEA,KAAM,CAAAnC,IAAI,CAAG,KAAM,CAAAU,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClCzE,iBAAiB,CAAC0D,IAAI,CAAC,CACvBtD,eAAe,CAACsD,IAAI,CAACuB,MAAM,CAAC,CAE5B,GAAIb,QAAQ,CAACI,EAAE,CAAE,CACb,GAAI,CAAAsB,WAAW,kCAAAhC,MAAA,CAAoCJ,IAAI,CAACqC,aAAa,mDAAiD,CAEtH;AACA,GAAIrC,IAAI,CAACsC,eAAe,CAAE,CACtBF,WAAW,qCAAAhC,MAAA,CAAuCJ,IAAI,CAACuB,MAAM,KAAG,CACpE,CAEA;AACA,GAAIvB,IAAI,CAACsB,eAAe,CAAG,CAAC,CAAE,CAC1Bc,WAAW,MAAAhC,MAAA,CAAQJ,IAAI,CAACsB,eAAe,oCAAkC,CAC7E,CAEAc,WAAW,EAAI,sCAAsC,CAErD;AACA,GAAIpC,IAAI,CAACuB,MAAM,CAAE,CACbpB,UAAU,CAAC,IAAM,CACb5C,QAAQ,UAAA6C,MAAA,CAAUJ,IAAI,CAACuB,MAAM,CAAE,CAAC,CACpC,CAAC,CAAE,GAAG,CAAC,CAAE;AACb,CAEArF,UAAU,CAACkG,WAAW,CAAC,CACvB;AACAlD,eAAe,CAAC,CAAC,CACjBgB,YAAY,CAAC,CAAC,CAClB,CAAC,IAAM,CACH,KAAM,IAAI,CAAAgC,KAAK,CAAClC,IAAI,CAACiB,KAAK,EAAI,oCAAoC,CAAC,CACvE,CACJ,CAAE,MAAOA,KAAK,CAAE,CACZ/E,UAAU,WAAAkE,MAAA,CAAWa,KAAK,CAAChF,OAAO,CAAE,CAAC,CACrCG,cAAc,CAAC,KAAK,CAAC,CACzB,CACJ,CAAC,CAAE,GAAG,CAAC,CACX,CAAC,CAED,KAAM,CAAAmG,oBAAoB,CAAIxE,IAAI,EAAK,CACnC,OAAQA,IAAI,EACR,IAAK,SAAS,CAAE,MAAO,kBAAkB,CACzC,IAAK,OAAO,CAAE,MAAO,gBAAgB,CACrC,IAAK,SAAS,CAAE,MAAO,kBAAkB,CACzC,IAAK,YAAY,CAAE,MAAO,qBAAqB,CAC/C,QAAS,MAAO,eAAe,CACnC,CACJ,CAAC,CAED,mBACI7C,IAAA,QAAKsH,SAAS,CAAC,uBAAuB,CAAAC,QAAA,cAGlCrH,KAAA,QAAKoH,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eACZvH,IAAA,QAAKsH,SAAS,CAAC,aAAa,CAAAC,QAAA,cACxCvH,IAAA,OAAAuH,QAAA,CAAI,kBAAgB,CAAI,CAAC,CACxB,CAAC,cACNvH,IAAA,MAAAuH,QAAA,CAAG,sFAA8E,CAAG,CAAC,cACrFrH,KAAA,SAAMsH,QAAQ,CAAEd,YAAa,CAACY,SAAS,CAAC,aAAa,CAAAC,QAAA,eAEjDrH,KAAA,QAAKoH,SAAS,CAAC,yCAAyC,CAACG,OAAO,CAAEA,CAAA,GAAMC,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC,CAACC,KAAK,CAAC,CAAE,CAAAL,QAAA,eAC3HvH,IAAA,OAAIsH,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,sCAA0B,CAAI,CAAC,cAC/DvH,IAAA,MAAGsH,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAC,2EAAyE,CAAG,CAAC,uBAAoB,cAAAvH,IAAA,CAACH,YAAY,EACjJgI,KAAK,CAAC,8BAA8B,CACpCpB,KAAK,CAAEnG,mBAAoB,CAC3BwH,aAAa,CAAEtB,kBAAmB,CAClCuB,OAAO,CAAC,qBAAqB,CAC7BC,QAAQ,CAAE,KAAM,CAChBC,MAAM,CAAC,sBAAsB,CAC7BC,IAAI,CAAC,cAAI,CACTC,UAAU,CAAC,kEAAkE,CAC7EC,WAAW,CAAC,mCAAmC,CAClD,CAAC,EAGG,CAAC,uBAAoB,CAACzG,YAAY,eACnCzB,KAAA,QAAKoH,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBvH,IAAA,QAAKsH,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAC,QAAC,CAAK,CAAC,cACzCvH,IAAA,MAAAuH,QAAA,CAAG,0CAAwC,CAAG,CAAC,EAC9C,CACR,CAGA9F,cAAc,EAAI,CAACE,YAAY,eAC5BzB,KAAA,QAAKoH,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7BrH,KAAA,QAAKoH,SAAS,CAAC,aAAa,CAAAC,QAAA,eACxBvH,IAAA,SAAMsH,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,cAAE,CAAM,CAAC,cACrCvH,IAAA,SAAMsH,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,gCAA8B,CAAM,CAAC,EACjE,CAAC,cACNrH,KAAA,QAAKoH,SAAS,CAAC,cAAc,CAAAC,QAAA,eACzBrH,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAAC9F,cAAc,CAACkF,OAAO,CAACC,QAAQ,EAAI,CAAC,cAC/D1G,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAAC9F,cAAc,CAACkF,OAAO,CAAC0B,SAAS,CAACC,WAAW,CAAC,CAAC,EAAI,CAAC,cAC9EpI,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,WAAS,CAAQ,CAAC,IAAC,CAAC,GAAI,CAAA5D,IAAI,CAAClC,cAAc,CAACkF,OAAO,CAAC4B,UAAU,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAI,CAAC,CAEnG/G,cAAc,CAACwE,GAAG,eACf/F,KAAA,QAAKoH,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAC9BrH,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,kBAAgB,CAAQ,CAAC,KAAE,CAAC9F,cAAc,CAACwE,GAAG,CAACE,EAAE,EAAI,CAAC,cACjEjG,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,UAAQ,CAAQ,CAAC,IAAC,CAAC9F,cAAc,CAACwE,GAAG,CAACwC,YAAY,CAAC,4BAA0B,EAAG,CAAC,cAC5FzI,IAAA,WACI6C,IAAI,CAAC,QAAQ,CACbyE,SAAS,CAAC,uBAAuB,CACjCG,OAAO,CAAEA,CAAA,GAAM,CACX,GAAI5F,cAAc,CAAE,CAChB,GAAI4C,MAAM,CAACiE,OAAO,CAAC,qHAAqH,CAAC,CAAE,CACvIrG,QAAQ,UAAA6C,MAAA,CAAUzD,cAAc,CAACwE,GAAG,CAACE,EAAE,CAAE,CAAC,CAC9C,CACJ,CAAC,IAAM,CACH9D,QAAQ,UAAA6C,MAAA,CAAUzD,cAAc,CAACwE,GAAG,CAACE,EAAE,CAAE,CAAC,CAC9C,CACJ,CAAE,CAAAoB,QAAA,CACL,mBAED,CAAQ,CAAC,EACR,CACR,cAEDrH,KAAA,MAAGoH,SAAS,CAAC,WAAW,CAAAC,QAAA,eACpBvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,kFAC1B,EAAG,CAAC,cAEJvH,IAAA,WACI6C,IAAI,CAAC,QAAQ,CACbyE,SAAS,CAAC,cAAc,CACxBG,OAAO,CAAEA,CAAA,GAAM,CACX,GAAIhD,MAAM,CAACiE,OAAO,CAAC,kDAAkD,CAAC,CAAE,CACpEnI,sBAAsB,CAAC,EAAE,CAAC,CAC1BmB,iBAAiB,CAAC,IAAI,CAAC,CACvBV,UAAU,CAAC,EAAE,CAAC,CACdgB,mBAAmB,CAAC,KAAK,CAAC,CAC9B,CACJ,CAAE,CAAAuF,QAAA,CACL,qBAED,CAAQ,CAAC,EACR,CAAC,EACL,CACR,CAGA1G,OAAO,CAAC0B,MAAM,CAAG,CAAC,eACfrC,KAAA,QAAKoH,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eAC/BrH,KAAA,QAAKoH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC3BvH,IAAA,SAAMsH,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,cAAE,CAAM,CAAC,cACxCvH,IAAA,SAAMsH,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,oBAAkB,CAAM,CAAC,EACxD,CAAC,cACNrH,KAAA,QAAKoH,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC5BrH,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,qBAAmB,CAAQ,CAAC,IAAC,CAAC1G,OAAO,CAAC0B,MAAM,EAAI,CAAC,CAC3DN,aAAa,eACV/B,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,iBAAe,CAAQ,CAAC,IAAC,CAACtF,aAAa,CAACqE,YAAY,EAAI,CACtE,CACA7E,cAAc,EAAIA,cAAc,CAACwE,GAAG,eACjC/F,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,aAAW,CAAQ,CAAC,KAAE,CAAC9F,cAAc,CAACwE,GAAG,CAACE,EAAE,CAAC,IAAE,CAAC1E,cAAc,CAACwE,GAAG,CAACwC,YAAY,CAAC,oBAAkB,EAAG,CACnH,cACDvI,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAAC9F,cAAc,CAAG,qBAAqB,CAAG,gBAAgB,EAAI,CAAC,CACxFA,cAAc,eACXvB,KAAA,MAAGoH,SAAS,CAAC,cAAc,CAAAC,QAAA,eACvBvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,uFAC1B,EAAG,CACN,CACAtF,aAAa,EAAIA,aAAa,CAACmE,eAAe,CAAG,CAAC,eAC/ClG,KAAA,MAAGoH,SAAS,CAAC,cAAc,CAAAC,QAAA,eACvBvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAACtF,aAAa,CAACmE,eAAe,CAAC,uDAC1D,EAAG,CACN,EACA,CAAC,EACL,CACR,cAGDlG,KAAA,QAAKoH,SAAS,CAAC,yCAAyC,CAACG,OAAO,CAAEA,CAAA,GAAMC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC,CAACC,KAAK,CAAC,CAAE,CAAAL,QAAA,eAC/GvH,IAAA,OAAIsH,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,6BAAiB,CAAI,CAAC,cACtDvH,IAAA,MAAGsH,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAC,yEAAuE,CAAG,CAAC,uBAAoB,cAAAvH,IAAA,CAACH,YAAY,EAC/IgI,KAAK,CAAC,sBAAgB,CACtBpB,KAAK,CAAE5F,OAAQ,CACfiH,aAAa,CAAGrB,KAAK,EAAK,CACtB3F,UAAU,CAAC2F,KAAK,CAAC,CACjBzE,mBAAmB,CAAC,KAAK,CAAC,CAAE;AAChC,CAAE,CACF+F,OAAO,CAAC,SAAS,CACjBC,QAAQ,CAAE,IAAK,CACfC,MAAM,CAAC,iBAAiB,CACxBC,IAAI,CAAC,cAAI,CACTC,UAAU,CAAC,kDAAkD,CAC7DC,WAAW,CAAC,6BAA6B,CAC5C,CAAC,EAGG,CAAC,uBAAoB,CAACvH,OAAO,CAAC0B,MAAM,CAAG,CAAC,eACzCrC,KAAA,QAAKoH,SAAS,CAAC,yBAAyB,CAAAC,QAAA,EACnC,CAAC9F,cAAc,EAAI,CAACA,cAAc,CAACwE,GAAG,cACnCjG,IAAA,QAAKsH,SAAS,CAAC,sBAAsB,CAAAC,QAAA,cACjCvH,IAAA,MAAAuH,QAAA,CAAG,oGAAwF,CAAG,CAAC,CAC9F,CAAC,cAENrH,KAAA,CAAAE,SAAA,EAAAmH,QAAA,eACIvH,IAAA,WACI6C,IAAI,CAAC,QAAQ,CACbyE,SAAS,CAAC,qBAAqB,CAC/BG,OAAO,CAAEzB,qBAAsB,CAC/B2C,QAAQ,CAAExG,oBAAqB,CAAAoF,QAAA,CAE9BpF,oBAAoB,CAAG,aAAa,CAAG,yBAAyB,CAC7D,CAAC,cACTjC,KAAA,MAAGoH,SAAS,CAAC,sBAAsB,CAAAC,QAAA,EAAC,kCACA,CAAC9F,cAAc,CAACwE,GAAG,CAACE,EAAE,CAAC,OAC3D,EAAG,CAAC,EACN,CACL,CAEAlE,aAAa,eACV/B,KAAA,QAAKoH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC3BrH,KAAA,QAAKoH,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAC9BrH,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,cAAY,CAAQ,CAAC,IAAC,CAACtF,aAAa,CAACsE,WAAW,EAAI,CAAC,cAChErG,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,iBAAe,CAAQ,CAAC,IAAC,CAACtF,aAAa,CAACqE,YAAY,EAAI,CAAC,cACpEpG,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,mBAAiB,CAAQ,CAAC,IAAC,CAACtF,aAAa,CAACmE,eAAe,EAAI,CAAC,EACxE,CAAC,CAELnE,aAAa,CAAC2G,UAAU,CAACrG,MAAM,CAAG,CAAC,eAChCrC,KAAA,QAAKoH,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAC9BvH,IAAA,OAAAuH,QAAA,CAAI,oBAAkB,CAAI,CAAC,CAC1BtF,aAAa,CAAC2G,UAAU,CAACnG,GAAG,CAAC,CAACoG,GAAG,CAAEC,KAAK,gBACrC9I,IAAA,QAAiBsH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CACtCsB,GAAG,CAAC9C,KAAK,cACN7F,KAAA,MAAGoH,SAAS,CAAC,iBAAiB,CAAAC,QAAA,EAAC,SAAE,CAACsB,GAAG,CAACjC,QAAQ,CAAC,IAAE,CAACiC,GAAG,CAAC9C,KAAK,EAAI,CAAC,cAEhE7F,KAAA,QAAAqH,QAAA,eACIrH,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,OAAK,CAAQ,CAAC,IAAC,CAACsB,GAAG,CAACjC,QAAQ,EAAI,CAAC,cAC5C1G,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,eAAa,CAAQ,CAAC,IAAC,CAACsB,GAAG,CAACE,YAAY,CAACC,eAAe,CAAC,SAAO,CAACH,GAAG,CAACE,YAAY,CAAC1C,MAAM,CAAC,GAAC,EAAG,CAAC,cACzGnG,KAAA,MAAAqH,QAAA,eAAGvH,IAAA,WAAAuH,QAAA,CAAQ,YAAU,CAAQ,CAAC,IAAC,CAACsB,GAAG,CAACE,YAAY,CAACE,cAAc,EAAI,CAAC,EACnE,CACR,EATKH,KAUL,CACR,CAAC,EACD,CACR,EACA,CACR,EACA,CACR,cAED9I,IAAA,WACI6C,IAAI,CAAC,QAAQ,CACbyE,SAAS,eAAApC,MAAA,CAAgBjE,WAAW,CAAG,WAAW,CAAG,EAAE,CAAG,CAC1D0H,QAAQ,CAAE1H,WAAW,EAAIc,gBAAiB,CAAAwF,QAAA,cAE1CvH,IAAA,SAAMsH,SAAS,CAAC,aAAa,CAAAC,QAAA,CACxBtG,WAAW,CAAG,cAAc,CAC5Bc,gBAAgB,CAAG,6BAA6B,CAChDN,cAAc,CAAG,kCAAkC,CAAG,gBAAgB,CACrE,CAAC,CACH,CAAC,EACP,CAAC,cAGPzB,IAAA,CAACF,iBAAiB,EACdoJ,SAAS,CAAEjI,WAAY,CACvBkI,YAAY,CAAEtI,OAAO,CAAC0B,MAAO,CAC7BtB,WAAW,CAAEA,WAAY,CAC5B,CAAC,CAGDA,WAAW,EAAII,eAAe,CAACkB,MAAM,CAAG,CAAC,eACtCrC,KAAA,QAAKoH,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7BvH,IAAA,OAAAuH,QAAA,CAAI,mBAAiB,CAAI,CAAC,cAC1BvH,IAAA,QAAKsH,SAAS,CAAC,eAAe,CAAAC,QAAA,CACzBlG,eAAe,CAACoB,GAAG,CAAC,CAAC2G,MAAM,CAAEN,KAAK,gBAC/B5I,KAAA,QAAiBoH,SAAS,kBAAApC,MAAA,CAAmBmC,oBAAoB,CAAC+B,MAAM,CAACvG,IAAI,CAAC,CAAG,CAAA0E,QAAA,eAC7EvH,IAAA,SAAMsH,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAE6B,MAAM,CAACrI,OAAO,CAAO,CAAC,cAC1Df,IAAA,SAAMsH,SAAS,CAAC,eAAe,CAAAC,QAAA,CAC1B,GAAI,CAAA5D,IAAI,CAACyF,MAAM,CAACC,SAAS,CAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC,CACrD,CAAC,GAJDR,KAKL,CACR,CAAC,CACD,CAAC,EACL,CACR,CAEA/H,OAAO,eAAIf,IAAA,MAAGsH,SAAS,YAAApC,MAAA,CAAanE,OAAO,CAACwI,UAAU,CAAC,OAAO,CAAC,CAAG,OAAO,CAAG,SAAS,CAAG,CAAAhC,QAAA,CAAExG,OAAO,CAAI,CAAC,CAEtGI,cAAc,EAAIA,cAAc,CAACqI,aAAa,EAAIrI,cAAc,CAACqI,aAAa,CAACjH,MAAM,CAAG,CAAC,eACtFrC,KAAA,QAAKoH,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eACjCvH,IAAA,OAAAuH,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7BvH,IAAA,OAAAuH,QAAA,CACKpG,cAAc,CAACqI,aAAa,CAAC/G,GAAG,CAAC,CAACC,IAAI,CAAEoG,KAAK,gBAC1C5I,KAAA,OAAAqH,QAAA,eAAgBvH,IAAA,WAAAuH,QAAA,CAAS7E,IAAI,CAACkE,QAAQ,CAAS,CAAC,MAAG,CAAClE,IAAI,CAAC+G,MAAM,GAAtDX,KAA2D,CACvE,CAAC,CACF,CAAC,EACJ,CACR,EACA,CAAC,CACL,CAAC,CAEd,CAAC,CAED,cAAe,CAAAzI,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}