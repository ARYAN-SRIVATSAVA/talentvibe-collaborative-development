name: Deploy TalentVibe to AWS Elastic Beanstalk

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      run: |
        python -m pytest test_application.py -v
    
    - name: Lint Python code
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        rm -rf node_modules package-lock.json
        npm install
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy backend files
        cp application.py deployment/
        cp requirements.txt deployment/
        cp -r backend deployment/
        cp -r .ebextensions deployment/
        cp -r .platform deployment/
        
        # Copy built frontend
        cp -r frontend/build deployment/frontend_build
        
        # Create deployment zip
        cd deployment
        zip -r ../talentvibe-deployment.zip .
        cd ..
        
        echo "Deployment package created: talentvibe-deployment.zip"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: TalentVibe-deployment
        environment_name: TalentVibe-deployment-env
        version_label: "v-${{ github.run_number }}-${{ github.sha }}"
        region: us-east-2
        deployment_package: talentvibe-deployment.zip
        wait_for_deployment: true
        wait_for_environment_recovery: true
    
    - name: Health check
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 60
        
        # Get the environment URL
        ENVIRONMENT_URL=$(aws elasticbeanstalk describe-environments \
          --environment-names TalentVibe-deployment-env \
          --query "Environments[0].CNAME" \
          --output text)
        
        echo "Testing deployment at: http://$ENVIRONMENT_URL"
        
        # Simple health check
        for i in {1..10}; do
          if curl -f -s "http://$ENVIRONMENT_URL/api/health" > /dev/null; then
            echo "‚úÖ Deployment successful! Application is responding."
            break
          else
            echo "‚è≥ Waiting for application to be ready... (attempt $i/10)"
            sleep 30
          fi
        done
        
        if [ $i -eq 10 ]; then
          echo "‚ùå Health check failed after 10 attempts"
          exit 1
        fi

  notify:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Your application is now live at: http://talentvibe-deployment-env.eba-sayeppgb.us-east-2.elasticbeanstalk.com/"
        else
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for more details."
        fi
